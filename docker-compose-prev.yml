# Щоб сервіс працював повністю, радимо також запустити Telegram-бота:
# https://github.com/floyse-back/steam-analytic-tg
# Він надсилає сповіщення у Telegram та забезпечує зручну взаємодію з користувачем.

services:
  # Сервіс бази даних PostgreSQL (для бекенду)
  database:
    image: postgres:17
    restart: always
    shm_size: 1024mb
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-backend-data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  # Сервіс pgAdmin (веб-інтерфейс для PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - database
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - app-network
      - tg-network

  # Сервіс Redis (сховище даних в пам’яті)
  redis:
    stdin_open: true
    tty: true
    image: redis
    networks:
      - app-network
    ports:
      - "6379:6379"

  # Сервіс RabbitMQ (Брокер повідомлень)
  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    hostname: rabbitmq_backend
    container_name: rabbitmq_backend
    ports:
      - "5673:5672"       # порт для обміну повідомленнями
      - "15673:15672"     # веб-інтерфейс RabbitMQ
    depends_on:
      - database
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
      - tg-network

  # Основний застосунок (FastAPI)
  app:
    depends_on:
      - rabbitmq
      - redis
      - database
      - pgadmin
    build:
      dockerfile: Dockerfile
      context: ./
    environment:
      RUN_PRESTANT: 1
      ASYNC_DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database/${POSTGRES_DB}"
      SYNC_DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database/${POSTGRES_DB}"
      TEST_DATABASE_URL: "postgresql+asyncpg://postgres:admin@database/test_steam_analytic"
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
      REDIS_HOST: "redis"
      RABBITMQ_HOST: "rabbitmq"
    networks:
      - app-network
    ports:
      - "8000:8000"

  # Сервіс Celery worker (оновлення даних)
  update_worker:
    build: .
    container_name: "update_worker"
    depends_on:
      - app
      - rabbitmq
    environment:
      RUN_PRESTANT: 0
      RABBITMQ_HOST: "rabbitmq"
      SYNC_DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database/${POSTGRES_DB}"
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
    command: celery -A app.infrastructure.celery_app.celery_app worker --loglevel=INFO --pool=solo -Q steam_analytic
    networks:
      - app-network

  # Сервіс Celery worker (повідомлення)
  notificate_worker:
    build: .
    container_name: "notificate_worker"
    depends_on:
      - rabbitmq
      - app
    environment:
      RUN_PRESTANT: 0
      RABBITMQ_HOST: "rabbitmq"
      SYNC_DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database/${POSTGRES_DB}"
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
    command: celery -A app.infrastructure.celery_app.celery_app worker --loglevel=INFO --pool=solo -Q subscribe_analytic,news_analytic
    networks:
      - app-network

  # Сервіс Celery beat (планувальник задач)
  celery_beat:
    build: .
    container_name: "celery_beat"
    depends_on:
      - app
      - rabbitmq
    environment:
      RUN_PRESTANT: 0
      RABBITMQ_HOST: "rabbitmq"
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
    command: celery -A app.infrastructure.celery_app.celery_app beat
    networks:
      - app-network

networks:
  tg-network:
  app-network:

volumes:
  rabbitmq-data:
  postgres-backend-data:
