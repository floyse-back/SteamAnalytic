services:
  # Сервіс бази даних PostgreSQL
  database:
    image: postgres
    restart: always
    shm_size: 1024mb
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: postgres
      POSTGRES_DB: SteamAnalitic
    volumes:
      - postgres-backend-data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  # Сервіс RabbitMQ (черга повідомлень)
  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"       # порт для обміну повідомленнями
      - "15672:15672"     # веб-інтерфейс RabbitMQ
    depends_on:
      - database
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
      - tg-network

  # Сервіс pgAdmin (веб-інтерфейс для PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - database
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - app-network
      - tg-network

  # Сервіс Redis (сховище даних в пам’яті)
  redis:
    stdin_open: true
    tty: true
    image: redis
    networks:
      - app-network
    ports:
      - "6379:6379"

  # Основний застосунок (FastAPI)
  app:
    depends_on:
      - rabbitmq
      - redis
      - database
      - pgadmin
    build:
      dockerfile: Dockerfile
      context: ./
    environment:
      RUN_PRESTANT: 1
      ASYNC_DATABASE_URL: "postgresql+asyncpg://postgres:admin@database/SteamAnalitic"
      SYNC_DATABASE_URL: "postgresql://postgres:admin@database/SteamAnalitic"
      TEST_DATABASE_URL: "postgresql+asyncpg://postgres:admin@database/test_steam_analytic"
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
      REDIS_HOST: "redis"
      RABBITMQ_HOST: "rabbitmq"
    networks:
      - app-network
    ports:
      - "8000:8000"

  # Сервіс Celery worker (виконує фонові задачі)
  update_worker:
    build: .
    container_name: "update_worker"
    depends_on:
      - app
      - rabbitmq
    environment:
      RUN_PRESTANT: 0
      SYNC_DATABASE_URL: "postgresql://postgres:admin@database/SteamAnalitic"
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
    command: celery -A app.infrastructure.celery_app.celery_app worker --loglevel=INFO --pool=solo -Q steam_analytic
    networks:
      - app-network

  notificate_worker:
    build: .
    container_name: "notificate_worker"
    depends_on:
      - app
      - rabbitmq
    environment:
      RUN_PRESTANT: 0
      SYNC_DATABASE_URL: "postgresql://postgres:admin@database/SteamAnalitic"
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
    command: celery -A app.infrastructure.celery_app.celery_app worker --loglevel=INFO --pool=solo -Q subscribe_analytic,news_analytic
    networks:
      - app-network

  database-tg:
    image: postgres
    restart: always
    shm_size: 1024mb
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: postgres
      POSTGRES_DB: SteamTelegram
    networks:
      - tg-network
    volumes:
      - postgres-tg-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  telegram-bot:
    build: ../steam_telegram_bot/steam-analytic-tg
    container_name: "telegram-bot"
    environment:
      RUN_PRESTANT: 1
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
      ASYNC_DATABASE_URL: "postgresql+asyncpg://postgres:admin@database-tg/SteamTelegram"
      SYNC_DATABASE_URL: "postgresql://postgres:admin@database-tg/SteamTelegram"
      BASE_URL: "http://app"
    depends_on:
      - app
      - rabbitmq
      - database-tg
    networks:
      - tg-network


  subscribe-worker-tg:
    build: ../steam_telegram_bot/steam-analytic-tg
    container_name: "subscribe_worker_tg"
    depends_on:
      - rabbitmq
      - telegram-bot
      - app
      - database-tg
    networks:
      - tg-network
    environment:
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
      ASYNC_DATABASE_URL: "postgresql+asyncpg://postgres:admin@database-tg/SteamTelegram"
      SYNC_DATABASE_URL: "postgresql://postgres:admin@database-tg/SteamTelegram"
      RUN_PRESTANT: 0

    command: celery -A src.infrastructure.celery.celery_app worker --loglevel=INFO --pool=solo -Q subscribes_bot

  news-worker-tg:
    build: ../steam_telegram_bot/steam-analytic-tg
    container_name: "news_worker_tg"
    depends_on:
      - rabbitmq
      - telegram-bot
      - app
      - database-tg
    networks:
      - tg-network
    environment:
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
      ASYNC_DATABASE_URL: "postgresql+asyncpg://postgres:admin@database-tg/SteamTelegram"
      SYNC_DATABASE_URL: "postgresql://postgres:admin@database-tg/SteamTelegram"
      RUN_PRESTANT: 0

    command: celery -A src.infrastructure.celery.celery_app worker --loglevel=INFO --pool=solo -Q news_bot

  # Сервіс Celery beat (планувальник задач)
  celery_beat:
    build: .
    container_name: "celery_beat"
    depends_on:
      - app
      - rabbitmq
    environment:
      RUN_PRESTANT: 0
      CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672"
      CELERY_RESULT_BACKEND: "rpc://"
    command: celery -A app.infrastructure.celery_app.celery_app beat
    networks:
      - app-network

# Мережа між контейнерами
networks:
  app-network:
  tg-network:

# Том для збереження даних RabbitMQ
volumes:
  rabbitmq-data:
  postgres-tg-data:
  postgres-backend-data:


