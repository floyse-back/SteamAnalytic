"""empty message

Revision ID: bc971548e634
Revises: 
Create Date: 2025-08-01 14:00:02.287425

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bc971548e634'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm;")
    op.create_table('blocked_games',
    sa.Column('appid', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('appid')
    )
    op.create_table('categories',
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('category_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('category_id'),
    sa.UniqueConstraint('category_name')
    )
    op.create_index(op.f('ix_categories_category_id'), 'categories', ['category_id'], unique=False)
    op.create_table('gamesdetails',
    sa.Column('steam_appid', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('is_free', sa.Boolean(), nullable=True),
    sa.Column('short_description', sa.String(), nullable=True),
    sa.Column('requirements', sa.JSON(), nullable=True),
    sa.Column('initial_price', sa.Integer(), nullable=True),
    sa.Column('final_price', sa.Integer(), nullable=True),
    sa.Column('final_formatted_price', sa.String(), nullable=True),
    sa.Column('metacritic', sa.String(), nullable=True),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.Column('achievements', sa.JSON(), nullable=True),
    sa.Column('recomendations', sa.Integer(), nullable=True),
    sa.Column('img_url', sa.String(), nullable=True),
    sa.Column('trailer_url', sa.String(), nullable=True),
    sa.Column('release_data', sa.Date(), nullable=True),
    sa.Column('last_updated', sa.Date(), nullable=True),
    sa.PrimaryKeyConstraint('steam_appid'),
    sa.UniqueConstraint('steam_appid', name='uq_gamesdetails_steam_appid')
    )
    op.create_index('idx_game_name_trgm', 'gamesdetails', ['name'], unique=False, postgresql_using='gin', postgresql_ops={'name': 'gin_trgm_ops'})
    op.create_index(op.f('ix_gamesdetails_name'), 'gamesdetails', ['name'], unique=False)
    op.create_index(op.f('ix_gamesdetails_steam_appid'), 'gamesdetails', ['steam_appid'], unique=True)
    op.create_table('ganres',
    sa.Column('ganres_id', sa.Integer(), nullable=False),
    sa.Column('ganres_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('ganres_id'),
    sa.UniqueConstraint('ganres_name')
    )
    op.create_index(op.f('ix_ganres_ganres_id'), 'ganres', ['ganres_id'], unique=False)
    op.create_table('publishers',
    sa.Column('publisher_id', sa.Integer(), nullable=False),
    sa.Column('publisher_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('publisher_id'),
    sa.UniqueConstraint('publisher_name')
    )
    op.create_index(op.f('ix_publishers_publisher_id'), 'publishers', ['publisher_id'], unique=False)
    op.create_table('safe_games',
    sa.Column('appid', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('appid')
    )
    op.create_table('steam_events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type_name', sa.String(), nullable=False),
    sa.Column('date_start', sa.Date(), nullable=False),
    sa.Column('date_end', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('steambase',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('appid', sa.String(), nullable=True),
    sa.Column('developer', sa.String(), nullable=True),
    sa.Column('publisher', sa.String(), nullable=True),
    sa.Column('positive', sa.Integer(), nullable=True),
    sa.Column('negative', sa.Integer(), nullable=True),
    sa.Column('average_forever', sa.Integer(), nullable=True),
    sa.Column('average_2weeks', sa.Integer(), nullable=True),
    sa.Column('median_forever', sa.Integer(), nullable=True),
    sa.Column('median_2weeks', sa.Integer(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.Column('img_url', sa.String(), nullable=True),
    sa.Column('ccu', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_steambase_appid'), 'steambase', ['appid'], unique=True)
    op.create_table('steambase_copy',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('appid', sa.String(), nullable=True),
    sa.Column('developer', sa.String(), nullable=True),
    sa.Column('publisher', sa.String(), nullable=True),
    sa.Column('positive', sa.Integer(), nullable=True),
    sa.Column('negative', sa.Integer(), nullable=True),
    sa.Column('average_forever', sa.Integer(), nullable=True),
    sa.Column('average_2weeks', sa.Integer(), nullable=True),
    sa.Column('median_forever', sa.Integer(), nullable=True),
    sa.Column('median_2weeks', sa.Integer(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.Column('img_url', sa.String(), nullable=True),
    sa.Column('ccu', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_steambase_copy_appid'), 'steambase_copy', ['appid'], unique=True)
    op.create_table('steambase_temp',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('appid', sa.String(), nullable=True),
    sa.Column('developer', sa.String(), nullable=True),
    sa.Column('publisher', sa.String(), nullable=True),
    sa.Column('positive', sa.Integer(), nullable=True),
    sa.Column('negative', sa.Integer(), nullable=True),
    sa.Column('average_forever', sa.Integer(), nullable=True),
    sa.Column('average_2weeks', sa.Integer(), nullable=True),
    sa.Column('median_forever', sa.Integer(), nullable=True),
    sa.Column('median_2weeks', sa.Integer(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.Column('img_url', sa.String(), nullable=True),
    sa.Column('ccu', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_steambase_temp_appid'), 'steambase_temp', ['appid'], unique=True)
    op.create_table('update_steam_base',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('update_steam_date', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role', sa.String(), nullable=True),
    sa.Column('steamid', sa.String(), nullable=True),
    sa.Column('steamname', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('blacklist',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_blacklist_id'), 'blacklist', ['id'], unique=False)
    op.create_index(op.f('ix_blacklist_token'), 'blacklist', ['token'], unique=False)
    op.create_table('category_to_many',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['game_id'], ['gamesdetails.steam_appid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('game_id', 'category_id')
    )
    op.create_table('email_confirmation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_email_confirmation_token'), 'email_confirmation', ['token'], unique=False)
    op.create_table('ganre_to_many',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('ganre_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['gamesdetails.steam_appid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ganre_id'], ['ganres.ganres_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('game_id', 'ganre_id')
    )
    op.create_table('publisher_to_many',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('publisher_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['gamesdetails.steam_appid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['publisher_id'], ['publishers.publisher_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('game_id', 'publisher_id')
    )
    op.create_table('refreshtokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('refresh_token', sa.String(), nullable=False),
    sa.Column('delete_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refreshtokens_id'), 'refreshtokens', ['id'], unique=False)
    op.create_index(op.f('ix_refreshtokens_refresh_token'), 'refreshtokens', ['refresh_token'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_refreshtokens_refresh_token'), table_name='refreshtokens')
    op.drop_index(op.f('ix_refreshtokens_id'), table_name='refreshtokens')
    op.drop_table('refreshtokens')
    op.drop_table('publisher_to_many')
    op.drop_table('ganre_to_many')
    op.drop_index(op.f('ix_email_confirmation_token'), table_name='email_confirmation')
    op.drop_table('email_confirmation')
    op.drop_table('category_to_many')
    op.drop_index(op.f('ix_blacklist_token'), table_name='blacklist')
    op.drop_index(op.f('ix_blacklist_id'), table_name='blacklist')
    op.drop_table('blacklist')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_table('users')
    op.drop_table('update_steam_base')
    op.drop_index(op.f('ix_steambase_temp_appid'), table_name='steambase_temp')
    op.drop_table('steambase_temp')
    op.drop_index(op.f('ix_steambase_copy_appid'), table_name='steambase_copy')
    op.drop_table('steambase_copy')
    op.drop_index(op.f('ix_steambase_appid'), table_name='steambase')
    op.drop_table('steambase')
    op.drop_table('steam_events')
    op.drop_table('safe_games')
    op.drop_index(op.f('ix_publishers_publisher_id'), table_name='publishers')
    op.drop_table('publishers')
    op.drop_index(op.f('ix_ganres_ganres_id'), table_name='ganres')
    op.drop_table('ganres')
    op.drop_index(op.f('ix_gamesdetails_steam_appid'), table_name='gamesdetails')
    op.drop_index(op.f('ix_gamesdetails_name'), table_name='gamesdetails')
    op.drop_index('idx_game_name_trgm', table_name='gamesdetails', postgresql_using='gin', postgresql_ops={'name': 'gin_trgm_ops'})
    op.drop_table('gamesdetails')
    op.drop_index(op.f('ix_categories_category_id'), table_name='categories')
    op.drop_table('categories')
    op.drop_table('blocked_games')
    # ### end Alembic commands ###
